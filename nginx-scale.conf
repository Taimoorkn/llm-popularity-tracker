#nginx-scale.conf
user nginx;
worker_processes auto;
worker_rlimit_nofile 65535;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 10240;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main buffer=16k;

    # Basic Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 100;
    types_hash_max_size 2048;
    client_max_body_size 20M;
    client_body_buffer_size 128k;
    
    # Gzip Settings
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript 
               application/json application/javascript application/xml+rss 
               application/rss+xml application/atom+xml image/svg+xml 
               text/x-js text/x-cross-domain-policy application/x-font-ttf 
               application/x-font-opentype application/vnd.ms-fontobject 
               image/x-icon;

    # Rate Limiting Zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/s;
    limit_req_zone $binary_remote_addr zone=vote:10m rate=60r/m;
    limit_req_zone $binary_remote_addr zone=static:10m rate=200r/s;
    limit_conn_zone $binary_remote_addr zone=addr:10m;

    # Cache Settings
    proxy_cache_path /var/cache/nginx/static levels=1:2 keys_zone=static_cache:100m 
                     max_size=1g inactive=24h use_temp_path=off;
    proxy_cache_path /var/cache/nginx/api levels=1:2 keys_zone=api_cache:50m 
                     max_size=500m inactive=5m use_temp_path=off;

    # Upstream Backend Servers
    upstream app_servers {
        least_conn;
        
        # Application servers
        server app:3000 max_fails=3 fail_timeout=30s;
        
        # Add more servers as they scale
        # Docker Compose will create app_2, app_3, etc.
        server app_2:3000 max_fails=3 fail_timeout=30s backup;
        server app_3:3000 max_fails=3 fail_timeout=30s backup;
        server app_4:3000 max_fails=3 fail_timeout=30s backup;
        
        # Keepalive connections to backend
        keepalive 32;
    }

    # WebSocket Upstream
    upstream websocket_servers {
        ip_hash;  # Sticky sessions for WebSocket
        
        server app:3000;
        server app_2:3000;
        server app_3:3000;
        server app_4:3000;
        
        keepalive 64;
    }

    # Map for WebSocket upgrade
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # Main Server Block
    server {
        listen 80;
        listen [::]:80;
        server_name _;
        
        # Security Headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
        
        # Connection limits
        limit_conn addr 100;
        
        # Static files with aggressive caching
        location /_next/static {
            proxy_pass http://app_servers;
            proxy_cache static_cache;
            proxy_cache_valid 200 302 7d;
            proxy_cache_valid 404 1m;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_background_update on;
            proxy_cache_lock on;
            
            add_header X-Cache-Status $upstream_cache_status;
            add_header Cache-Control "public, max-age=604800, immutable";
            
            # Rate limiting for static files
            limit_req zone=static burst=50 nodelay;
        }
        
        # Images and assets
        location ~* \.(jpg|jpeg|png|gif|ico|svg|woff|woff2|ttf|eot)$ {
            proxy_pass http://app_servers;
            proxy_cache static_cache;
            proxy_cache_valid 200 302 30d;
            proxy_cache_valid 404 1m;
            
            add_header X-Cache-Status $upstream_cache_status;
            add_header Cache-Control "public, max-age=2592000, immutable";
            expires 30d;
        }
        
        # API endpoints with rate limiting
        location /api/vote {
            proxy_pass http://app_servers;
            proxy_http_version 1.1;
            
            # Strict rate limiting for voting
            limit_req zone=vote burst=5 nodelay;
            limit_req_status 429;
            
            # No caching for vote endpoints
            proxy_cache off;
            
            # Headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
        }
        
        # Other API endpoints
        location /api {
            proxy_pass http://app_servers;
            proxy_http_version 1.1;
            
            # Rate limiting for API
            limit_req zone=api burst=20 nodelay;
            limit_req_status 429;
            
            # Conditional caching
            proxy_cache api_cache;
            proxy_cache_methods GET HEAD;
            proxy_cache_valid 200 5s;
            proxy_cache_valid 404 1m;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_bypass $http_pragma $http_authorization;
            proxy_no_cache $http_pragma $http_authorization;
            
            # Headers
            add_header X-Cache-Status $upstream_cache_status;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Connection "";
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }
        
        # WebSocket support
        location /socket.io {
            proxy_pass http://websocket_servers;
            proxy_http_version 1.1;
            
            # WebSocket headers
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket timeouts
            proxy_connect_timeout 7d;
            proxy_send_timeout 7d;
            proxy_read_timeout 7d;
            
            # Disable buffering for WebSocket
            proxy_buffering off;
            proxy_cache off;
        }
        
        # Health check endpoint (no rate limiting)
        location /api/health {
            proxy_pass http://app_servers;
            proxy_http_version 1.1;
            access_log off;
            
            proxy_set_header Host $host;
            proxy_connect_timeout 1s;
            proxy_send_timeout 1s;
            proxy_read_timeout 1s;
        }
        
        # Default location
        location / {
            proxy_pass http://app_servers;
            proxy_http_version 1.1;
            
            # General rate limiting
            limit_req zone=api burst=30 nodelay;
            
            # Caching for HTML pages
            proxy_cache api_cache;
            proxy_cache_valid 200 10s;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_background_update on;
            
            # Headers
            add_header X-Cache-Status $upstream_cache_status;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Connection "";
            
            # Keep-alive
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }
        
        # Custom error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

    # HTTPS Server Block (when SSL is configured)
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name _;
        
        # SSL Configuration
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_session_tickets off;
        ssl_stapling on;
        ssl_stapling_verify on;
        
        # Copy all location blocks from HTTP server
        # ... (same configuration as above)
    }
    
    # Redirect HTTP to HTTPS (when SSL is enabled)
    # server {
    #     listen 80;
    #     listen [::]:80;
    #     server_name _;
    #     return 301 https://$server_name$request_uri;
    # }
}